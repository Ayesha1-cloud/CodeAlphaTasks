import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Step 1: Load the Dataset
california = fetch_california_housing()
data = pd.DataFrame(california.data, columns=california.feature_names)
data['PRICE'] = california.target

# Step 2: Explore and Prepare the Data
# Checking for missing values
print(data.isnull().sum())

# Splitting the data into features (X) and target (y)
X = data.drop('PRICE', axis=1)
y = data['PRICE']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Build the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Evaluate the Model
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

print("Training Set Evaluation:")
print(f"Mean Absolute Error: {mean_absolute_error(y_train, y_pred_train)}")
print(f"Mean Squared Error: {mean_squared_error(y_train, y_pred_train)}")
print(f"R-squared: {r2_score(y_train, y_pred_train)}")

print("\nTesting Set Evaluation:")
print(f"Mean Absolute Error: {mean_absolute_error(y_test, y_pred_test)}")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred_test)}")
print(f"R-squared: {r2_score(y_test, y_pred_test)}")

# Step 6: Make Predictions on New Data
# Example of making predictions on new data
new_data = X_test.iloc[:5]  # Taking first 5 samples from the test set as new data
new_predictions = model.predict(new_data)
print("\nPredictions on New Data:")
print(new_predictions)
